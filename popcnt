#!/usr/bin/env perl
#
# popcnt - count the population of chars on stdin
#
# Copyright (c) 2003-2004,2023,2025 by Landon Curt Noll.  All Rights Reserved.
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted,
# provided that the above copyright, this permission notice and text
# this comment, and the disclaimer below appear in all of the following:
#
#       supporting documentation
#       source copies
#       source works derived from this source
#       binaries derived from this source or from derived source
#
# LANDON CURT NOLL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
# EVENT SHALL LANDON CURT NOLL BE LIABLE FOR ANY SPECIAL, INDIRECT OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
# USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# chongo (Landon Curt Noll) /\oo/\
#
# http://www.isthe.com/chongo/index.html
# https://github.com/lcn2


# requirements
#
use strict;
use bytes;
use POSIX;
use vars qw($opt_h $opt_v $opt_V);
use Getopt::Long qw(:config no_ignore_case);
use File::Basename;

# version
#
my $VERSION = "1.0.5 2025-03-26";

# my vars
#
my $NAME = basename($0);
my $line;	# most recent input line
my %tally;	# character tally count
my $char;	# char to tally


# usage and help
#
my $usage = "$NAME [-h] [-v lvl] [-V]";
my $help = qq{$usage

    -h              print help and exit
    -v lvl          verbose / debug level
    -V              print version and exit

$NAME version: $VERSION};
my %optctl = (
    "h" => \$opt_h,
    "v=i" => \$opt_v,
    "V" => \$opt_V
);


# set the defaults
#
$opt_h = 0;
$opt_v = 0;
$opt_V = 0;


# parse args
#
if (!GetOptions(%optctl)) {
    error(1, "invalid command line\nusage: $help");
}
if ($opt_h) {
    print "$help\n";
    exit(0);
}
if ($opt_V) {
    print "$VERSION\n";
    exit(0);
}


# process all lines
#
while (defined($line = <>)) {

    # tally each char
    #
    foreach $char (split(//, $line)) {
	++$tally{$char};
    }
}


# print tally
#
foreach $char (sort keys %tally) {
    if ($char =~ /[[:print:]]/ && $char !~ /[[:space:]]/) {
	print "$char\t$tally{$char}\n";
    } else {
	printf("0x%02x\t%d\n", ord($char), $tally{$char});
    }
}
exit(0);
